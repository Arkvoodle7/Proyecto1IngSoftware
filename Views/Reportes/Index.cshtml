@{
    ViewData["Title"] = "Gestión de Reportes";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Gestión de Reportes</h1>

    <!-- Filtros de Reporte -->
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-filter me-1"></i>
            Filtros para Generar Reportes
        </div>
        <div class="card-body">
            <form id="reportForm">
                <div class="row">
                    <!-- Filtro de tipo de reporte -->
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="tipoReporte">Tipo de Reporte</label>
                            <select class="form-control" id="tipoReporte" name="tipoReporte">
                                <option value="facturas">Facturas</option>
                                <option value="ordenes">Órdenes de Compra</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-12">
                        <button type="button" class="btn btn-primary" id="generarReporte">Generar Reporte</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Tabla de Reportes Generados -->
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-table me-1"></i>
            Resultados del Reporte
        </div>
        <div class="card-body">
            <div id="errorMessage" class="alert alert-danger d-none"></div>
            <table id="reportesTable" class="table table-striped">
                <thead>
                    <tr>
                        <th>Número</th>
                        <th>Fecha</th>
                        <th>Total</th>
                        <th>ID Cliente/Proveedor</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Las filas serán generadas dinámicamente por AJAX -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Botones de Exportación -->
    <div class="row mb-4">
        <div class="col-md-6">
            <button class="btn btn-danger btn-block" id="exportPdf">Exportar a PDF</button>
        </div>
        <div class="col-md-6">
            <button class="btn btn-success btn-block" id="exportExcel">Exportar a Excel</button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" crossorigin="anonymous"></script>
    <script>
        $(document).ready(function () {
            //funcion para generar el reporte
            $('#generarReporte').click(function () {
                const tipoReporte = $('#tipoReporte').val();

                if (tipoReporte === 'facturas') {
                    generarReporteFacturas();
                } else if (tipoReporte === 'ordenes') {
                    generarReporteOrdenes();
                }
            });

            function generarReporteFacturas() {
                $.ajax({
                    url: "https://localhost:7015/api/Factura/facturas", //URL de la API de Facturas
                    method: "GET",
                    success: function (response) {
                        if (typeof response === "string") {
                            try {
                                response = JSON.parse(response);
                            } catch (e) {
                                mostrarError("Error al procesar la respuesta de la API de facturas.");
                                console.error("Error al analizar la respuesta JSON:", e);
                                return;
                            }
                        }

                        //procesar datos si la respuesta ya es un objeto JSON valido
                        mostrarFacturasEnTabla(response);
                    },
                    error: function (xhr, status, error) {
                        mostrarError("Error al cargar las facturas.");
                        console.error("Error al cargar las facturas:", xhr, status, error);
                    }
                });
            }

            function generarReporteOrdenes() {
                $.ajax({
                    url: "https://localhost:7015/api/OrdenCompra/ordenes", //URL de la API de Ordenes de Compra
                    method: "GET",
                    success: function (response) {
                        if (typeof response === "string") {
                            try {
                                response = JSON.parse(response);
                            } catch (e) {
                                mostrarError("Error al procesar la respuesta de la API de órdenes de compra.");
                                console.error("Error al analizar la respuesta JSON:", e);
                                return;
                            }
                        }

                        //procesar datos si la respuesta ya es un objeto JSON valido
                        mostrarOrdenesEnTabla(response);
                    },
                    error: function (xhr, status, error) {
                        mostrarError("Error al cargar las órdenes de compra.");
                        console.error("Error al cargar las órdenes de compra:", xhr, status, error);
                    }
                });
            }

            function mostrarFacturasEnTabla(facturas) {
                const tableBody = $("#reportesTable tbody");
                tableBody.empty(); //limpia la tabla antes de agregar datos

                //itera sobre las facturas y las agrega a la tabla
                facturas.forEach(factura => {
                    const fechaFormateada = new Date(factura.fecha).toLocaleDateString("es-ES");
                    const totalFormateado = factura.total.toLocaleString('en-US', { style: 'currency', currency: 'USD' });

                    tableBody.append(`
                        <tr>
                            <td>${factura.numFact}</td>
                            <td>${fechaFormateada}</td>
                            <td>${totalFormateado}</td>
                            <td>${factura.idCliente}</td>
                        </tr>
                    `);
                });
            }

            function mostrarOrdenesEnTabla(ordenes) {
                const tableBody = $("#reportesTable tbody");
                tableBody.empty(); //limpia la tabla antes de agregar datos

                //itera sobre las ordenes de compra y las agrega a la tabla
                ordenes.forEach(orden => {
                    const fechaFormateada = new Date(orden.fecha).toLocaleDateString("es-ES");
                    const totalFormateado = orden.total.toLocaleString('en-US', { style: 'currency', currency: 'USD' });

                    tableBody.append(`
                        <tr>
                            <td>${orden.numOC}</td>
                            <td>${fechaFormateada}</td>
                            <td>${totalFormateado}</td>
                            <td>${orden.idProv}</td>
                        </tr>
                    `);
                });
            }

            //funcion para mostrar mensajes de error en la tabla
            function mostrarError(mensaje) {
                const tableBody = $("#reportesTable tbody");
                tableBody.empty(); //limpia la tabla
                tableBody.append(`
                    <tr>
                        <td colspan="4" class="text-danger text-center">${mensaje}</td>
                    </tr>
                `);
            }

            //funcionalidad de exportar a PDF
            $('#exportPdf').click(function () {
                alert("La funcionalidad de exportar a PDF aún no está implementada.");
            });

            //funcionalidad de exportar a Excel
            $('#exportExcel').click(function () {
                alert("La funcionalidad de exportar a Excel aún no está implementada.");
            });
        });
    </script>
}